{"version":3,"sources":["Components/Header.js","Components/World.js","Components/Statedata.js","Components/India.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","className","to","Toggle","aria-controls","Collapse","id","Nav","Component","World","state","data","axios","get","then","response","setState","this","map","itm","ky","country","style","width","marginLeft","src","countryInfo","flag","cases","recovered","deaths","Statedata","stateData","keys","Object","Accordion","k","districts","districtData","total_active","total_confirmed","total_deaths","total_recover","district_list","x","active","confirmed","deceased","ob","push","Card","as","Button","eventKey","Body","district_name","India","Title","App","exact","path","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc88b85a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"#home\">\r\n            <Link className=\"nav-header\" to=\"/\">\r\n              COVID-19\r\n            </Link>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Link className=\"nav-link\" to=\"/india\">\r\n                India\r\n              </Link>\r\n              <Link className=\"nav-link\" to=\"/world\">\r\n                World\r\n              </Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass World extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get(\"https://corona.lmao.ninja/v2/countries\").then((response) => {\r\n      this.setState({ data: response.data });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <td>Country</td>\r\n                <td>Total Cases</td>\r\n                <td>Recovered</td>\r\n                <td>Deaths</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.data.map((itm, ky) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      {itm.country}{\" \"}\r\n                      <img\r\n                        style={{ width: \"50px\", marginLeft: \"10px\" }}\r\n                        src={itm.countryInfo.flag}\r\n                      />{\" \"}\r\n                    </td>\r\n                    <td>{itm.cases}</td>\r\n                    <td>{itm.recovered}</td>\r\n                    <td>{itm.deaths}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default World;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Accordion, Card, Button } from \"react-bootstrap\";\r\n\r\nclass Statedata extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      stateData: {},\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://api.covid19india.org/state_district_wise.json\")\r\n      .then((response) => {\r\n        this.setState({ stateData: response.data });\r\n      });\r\n  }\r\n  render() {\r\n    let keys = Object.keys(this.state.stateData);\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <Accordion>\r\n            {keys.map((itm, k) => {\r\n              let districts = this.state.stateData[itm].districtData;\r\n              let district_keys = Object.keys(districts);\r\n              let total_active = 0;\r\n              let total_confirmed = 0;\r\n              let total_deaths = 0;\r\n              let total_recover = 0;\r\n\r\n              let district_list = [];\r\n\r\n              for (let x in districts) {\r\n                total_active += districts[x].active;\r\n                total_confirmed += districts[x].confirmed;\r\n                total_deaths += districts[x].deceased;\r\n                total_recover += districts[x].recovered;\r\n                let ob = districts[x];\r\n                ob[\"district_name\"] = x;\r\n                district_list.push(ob);\r\n              }\r\n\r\n              return (\r\n                <Card>\r\n                  <Card.Header>\r\n                    <Accordion.Toggle\r\n                      as={Button}\r\n                      variant=\"primary\"\r\n                      eventKey={k}\r\n                    >\r\n                      {itm} -{\" \"}\r\n                      <span className=\"btn-dark p-1 mar-2\">\r\n                        Total Cases - {total_confirmed}\r\n                      </span>{\" \"}\r\n                      <span className=\"btn-dark p-1 mar-2\">\r\n                        Active - {total_active}{\" \"}\r\n                      </span>\r\n                      <span className=\"btn-dark p-1 mar-2\">\r\n                        Deaths - {total_deaths}{\" \"}\r\n                      </span>\r\n                      <span className=\"btn-dark p-1 mar-2\">\r\n                        Recovered - {total_recover}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                  </Card.Header>\r\n                  <Accordion.Collapse eventKey={k}>\r\n                    <Card.Body>\r\n                      <table className=\"table table-bordered table-striped\">\r\n                        <thead>\r\n                          <tr>\r\n                            <td>District</td>\r\n                            <td>Confirmed</td>\r\n                            <td>Active</td>\r\n                            <td>Discoverd</td>\r\n                            <td>Deaths</td>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {district_list.map((itm, ky) => {\r\n                            return (\r\n                              <tr>\r\n                                <td>{itm.district_name}</td>\r\n                                <td>{itm.confirmed}</td>\r\n                                <td>{itm.active}</td>\r\n                                <td>{itm.recovered}</td>\r\n                                <td>{itm.deceased}</td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              );\r\n            })}\r\n          </Accordion>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Statedata;\r\n","import React, { Component } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport Statedata from \"./Statedata\";\r\nimport axios from \"axios\";\r\n\r\nclass India extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: {},\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://corona.lmao.ninja/v2/countries/india\")\r\n      .then((response) => {\r\n        this.setState({ data: response.data });\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <img src=\"https://www.countryflags.io/in/shiny/64.png\" />\r\n          <h3>India</h3>\r\n        </div>\r\n        <div className=\"col-md-12\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n              <Card className=\"badge badge-primary\" style={{ width: \"18rem\" }}>\r\n                <Card.Body className=\"text-center\">\r\n                  <Card.Title>TOTAL CASES</Card.Title>\r\n                  <h3>{this.state.data.cases}</h3>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n\r\n            <div className=\"col-md-3\">\r\n              <Card className=\"badge badge-warning\" style={{ width: \"18rem\" }}>\r\n                <Card.Body className=\"text-center\">\r\n                  <Card.Title>ACTIVE CASES</Card.Title>\r\n                  <h3>{this.state.data.active}</h3>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n\r\n            <div className=\"col-md-3\">\r\n              <Card className=\"badge badge-success\" style={{ width: \"18rem\" }}>\r\n                <Card.Body className=\"text-center\">\r\n                  <Card.Title>RECOVERED</Card.Title>\r\n                  <h3>{this.state.data.recovered}</h3>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n\r\n            <div className=\"col-md-3\">\r\n              <Card className=\"badge badge-danger\" style={{ width: \"18rem\" }}>\r\n                <Card.Body className=\"text-center\">\r\n                  <Card.Title>DEATHS</Card.Title>\r\n                  <h3>{this.state.data.deaths}</h3>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-12\">\r\n          <Statedata />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default India;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./Components/Header\";\nimport World from \"./Components/World\";\nimport India from \"./Components/India\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <BrowserRouter>\n          <Header />\n\n          <Switch>\n            <Route exact path=\"/\">\n              <India />\n            </Route>\n            <Route path=\"/india\">\n              <India />\n            </Route>\n            <Route path=\"/world\">\n              <World />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}